// <auto-generated />
using System;
using MF2024_API.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MF2024_API.Migrations
{
    [DbContext(typeof(Mf2024apiDbContext))]
    partial class Mf2024apiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DepartmentOffice", b =>
                {
                    b.Property<int>("DepartmentsDepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("OfficesOfficeId")
                        .HasColumnType("int");

                    b.HasKey("DepartmentsDepartmentId", "OfficesOfficeId");

                    b.HasIndex("OfficesOfficeId");

                    b.ToTable("DepartmentOffice");
                });

            modelBuilder.Entity("EntrantsNfcallotment", b =>
                {
                    b.Property<int>("EntrantsID")
                        .HasColumnType("int");

                    b.Property<int>("NfcallotmentsNfcallotmentId")
                        .HasColumnType("int");

                    b.HasKey("EntrantsID", "NfcallotmentsNfcallotmentId");

                    b.HasIndex("NfcallotmentsNfcallotmentId");

                    b.ToTable("EntrantsNfcallotment");
                });

            modelBuilder.Entity("MF2024_API.Models.ConferenceRoomReservation", b =>
                {
                    b.Property<int>("ConferenceRoomReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConferenceRoomReservationRequirement")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ConferenceRoomReservationId");

                    b.HasIndex("DeviceId");

                    b.ToTable("ConferenceRoomReservation");
                });

            modelBuilder.Entity("MF2024_API.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    b.Property<DateTime>("DepartmentAddTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DepartmentAddUserID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("DepartmentFlag")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<string>("DepartmentNameKana")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<DateTime>("DepartmentUpDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DepartmentUpDateUserID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DiscordURL")
                        .HasColumnType("longtext");

                    b.Property<int>("OfficeId")
                        .HasColumnType("int");

                    b.HasKey("DepartmentId")
                        .HasName("PK__Departme__B2079BCD8440F670");

                    b.HasIndex("DepartmentAddUserID");

                    b.HasIndex("DepartmentUpDateUserID");

                    b.ToTable("Department", (string)null);
                });

            modelBuilder.Entity("MF2024_API.Models.Device", b =>
                {
                    b.Property<int>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DeviceID");

                    b.Property<DateTime>("DeviceAddTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeviceAddUserID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("DeviceCategory")
                        .HasColumnType("int");

                    b.Property<int>("DeviceFlag")
                        .HasColumnType("int");

                    b.Property<string>("DeviceLocation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("DeviceUpDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeviceUpdateUserID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DeviceUserID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int")
                        .HasColumnName("RoomID");

                    b.HasKey("DeviceId")
                        .HasName("PK__Device__49E1233136A11D86");

                    b.HasIndex("DeviceAddUserID");

                    b.HasIndex("DeviceUpdateUserID");

                    b.HasIndex("DeviceUserID");

                    b.HasIndex("RoomId");

                    b.ToTable("Device", (string)null);
                });

            modelBuilder.Entity("MF2024_API.Models.Entrants", b =>
                {
                    b.Property<int>("EntrantsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DeviceID")
                        .HasColumnType("int");

                    b.HasKey("EntrantsID");

                    b.HasIndex("DeviceID")
                        .IsUnique();

                    b.ToTable("Entrants");
                });

            modelBuilder.Entity("MF2024_API.Models.Equipment", b =>
                {
                    b.Property<int>("EquipmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte[]>("EquipmentData")
                        .HasColumnType("longblob");

                    b.Property<int>("EquipmentFlag")
                        .HasColumnType("int");

                    b.Property<string>("EquipmentName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("EquipmentID")
                        .HasName("PK__Equipment__80EF08927BE474C1");

                    b.HasIndex("RoomId");

                    b.ToTable("Equipment", (string)null);
                });

            modelBuilder.Entity("MF2024_API.Models.Nfc", b =>
                {
                    b.Property<int>("NfcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NfcID");

                    b.Property<DateTime>("NfcAddTime")
                        .HasColumnType("datetime");

                    b.Property<string>("NfcAddUserID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("NfcState")
                        .HasColumnType("int");

                    b.Property<string>("NfcUid")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("NfcUID");

                    b.Property<DateTime>("NfcUpdateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("NfcUpdateUserID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("NfcId")
                        .HasName("PK__NFC__628F58637E500CAF");

                    b.HasIndex("NfcAddUserID");

                    b.HasIndex("NfcUpdateUserID");

                    b.ToTable("NFC", (string)null);
                });

            modelBuilder.Entity("MF2024_API.Models.Nfcallotment", b =>
                {
                    b.Property<int>("NfcallotmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NFCAllotmentID");

                    b.Property<DateTime>("AddTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("AddUserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("AllotmentTime")
                        .HasColumnType("datetime");

                    b.Property<int>("NfcId")
                        .HasColumnType("int")
                        .HasColumnName("NfcID");

                    b.Property<int?>("NoReservationId")
                        .HasColumnType("int")
                        .HasColumnName("NoReservationID");

                    b.Property<int?>("ReservationId")
                        .HasColumnType("int")
                        .HasColumnName("ReservationID");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdateUserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("NfcallotmentId")
                        .HasName("PK__NFCAllot__5C5F4CB94877DFBC");

                    b.HasIndex("AddUserId");

                    b.HasIndex("NfcId");

                    b.HasIndex("NoReservationId");

                    b.HasIndex("ReservationId");

                    b.HasIndex("UpdateUserId");

                    b.HasIndex("UserId");

                    b.ToTable("NFCAllotment", (string)null);
                });

            modelBuilder.Entity("MF2024_API.Models.NoReservation", b =>
                {
                    b.Property<int>("NoReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NoReservationID");

                    b.Property<DateTime>("NoReservationAddTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NoReservationAddUserID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NoReservationCompanyName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NoReservationCompanyNameKana")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NoReservationCompanyPosition")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("NoReservationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NoReservationEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NoReservationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NoReservationNameKana")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("NoReservationNumberOfPrsesons")
                        .HasColumnType("int");

                    b.Property<string>("NoReservationPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NoReservationRequirement")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("NoReservationState")
                        .HasColumnType("int");

                    b.Property<DateTime>("NoReservationUpDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NoReservationUpdateUserID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("NoReservationId")
                        .HasName("PK__NoReserv__64ADE52735B426D1");

                    b.HasIndex("NoReservationAddUserID");

                    b.HasIndex("NoReservationUpdateUserID");

                    b.ToTable("NoReservation", (string)null);
                });

            modelBuilder.Entity("MF2024_API.Models.Office", b =>
                {
                    b.Property<int>("OfficeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OfficeID");

                    b.Property<DateTime>("OfficeAddTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OfficeAddUserID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("OfficeFlag")
                        .HasColumnType("int");

                    b.Property<string>("OfficeLocation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OfficeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OfficeNameKana")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("OfficeUpDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OfficeUpDateUserID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("OfficeId")
                        .HasName("PK__Office__4B61930F387A0FF8");

                    b.HasIndex("OfficeAddUserID");

                    b.HasIndex("OfficeUpDateUserID");

                    b.ToTable("Office", (string)null);
                });

            modelBuilder.Entity("MF2024_API.Models.OptOut", b =>
                {
                    b.Property<int>("OptOutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OptOutID");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int")
                        .HasColumnName("DeviceID");

                    b.Property<int>("NfcallotmentId")
                        .HasColumnType("int")
                        .HasColumnName("NFCAllotmentID");

                    b.Property<int>("OptOutState")
                        .HasColumnType("int");

                    b.Property<DateTime>("OptOutTime")
                        .HasColumnType("datetime");

                    b.HasKey("OptOutId")
                        .HasName("PK__OptOut__82926A1C961131F5");

                    b.HasIndex("DeviceId");

                    b.HasIndex("NfcallotmentId");

                    b.ToTable("OptOut", (string)null);
                });

            modelBuilder.Entity("MF2024_API.Models.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReservationID");

                    b.Property<DateTime>("ReservationAddTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ReservationAddUserID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ReservationCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ReservationCompanyName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ReservationCompanyNameKana")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ReservationCompanyPosition")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ReservationEmail")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ReservationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ReservationNameKana")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ReservationNumberOfPersons")
                        .HasColumnType("int");

                    b.Property<string>("ReservationPhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<byte[]>("ReservationQrcode")
                        .IsRequired()
                        .HasColumnType("longblob")
                        .HasColumnName("ReservationQRcode");

                    b.Property<int>("ReservationReception")
                        .HasColumnType("int");

                    b.Property<string>("ReservationRequirement")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ReservationState")
                        .HasColumnType("int");

                    b.Property<int>("ReservationType")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReservationUpDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ReservationUpdateUserID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .HasColumnType("longtext");

                    b.HasKey("ReservationId")
                        .HasName("PK__Reservat__B7EE5F0420AEDDCE");

                    b.HasIndex("ReservationAddUserID");

                    b.HasIndex("ReservationUpdateUserID");

                    b.HasIndex("SectionId");

                    b.ToTable("Reservation", (string)null);
                });

            modelBuilder.Entity("MF2024_API.Models.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoomID");

                    b.Property<int>("OfficeId")
                        .HasColumnType("int")
                        .HasColumnName("OfficeID");

                    b.Property<DateTime>("RommAddTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RoomAddUserID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("RoomCapacity")
                        .HasColumnType("int");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("RoomState")
                        .HasColumnType("int");

                    b.Property<DateTime>("RoomUpDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RoompDateUserID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int")
                        .HasColumnName("SectionID");

                    b.HasKey("RoomId")
                        .HasName("PK__Room__328639194D197077");

                    b.HasIndex("OfficeId");

                    b.HasIndex("RoomAddUserID");

                    b.HasIndex("RoompDateUserID");

                    b.HasIndex("SectionId");

                    b.ToTable("Room", (string)null);
                });

            modelBuilder.Entity("MF2024_API.Models.RoomImage", b =>
                {
                    b.Property<int>("RoomImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte[]>("RoomImageData")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("RoomImageName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("roomID")
                        .HasColumnType("int");

                    b.HasKey("RoomImageID")
                        .HasName("PK__Image__80EF08927BE474C1");

                    b.HasIndex("roomID");

                    b.ToTable("Image", (string)null);
                });

            modelBuilder.Entity("MF2024_API.Models.Section", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SectionID");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    b.Property<string>("DiscordURL")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SectionAddTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SectionAddUserID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("SectionFlag")
                        .HasColumnType("int");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SectionNameKana")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("SectionUpDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SectionUpDateUserID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("SectionId")
                        .HasName("PK__Section__80EF08927BE474C1");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("SectionAddUserID");

                    b.HasIndex("SectionUpDateUserID");

                    b.ToTable("Section", (string)null);
                });

            modelBuilder.Entity("MF2024_API.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UserDateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UserDateOfEntry")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UserDateOfRetirement")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserGender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("UserPasswoedUpdataTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UserUpdataDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserUpdataUser")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK__User__1788CC4C3A3D3A3A");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DepartmentOffice", b =>
                {
                    b.HasOne("MF2024_API.Models.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentsDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MF2024_API.Models.Office", null)
                        .WithMany()
                        .HasForeignKey("OfficesOfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntrantsNfcallotment", b =>
                {
                    b.HasOne("MF2024_API.Models.Entrants", null)
                        .WithMany()
                        .HasForeignKey("EntrantsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MF2024_API.Models.Nfcallotment", null)
                        .WithMany()
                        .HasForeignKey("NfcallotmentsNfcallotmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MF2024_API.Models.ConferenceRoomReservation", b =>
                {
                    b.HasOne("MF2024_API.Models.Device", "Device")
                        .WithMany("ConferenceRoomReservations")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("MF2024_API.Models.Department", b =>
                {
                    b.HasOne("MF2024_API.Models.User", "UpdateUser")
                        .WithMany("DepartmentAdd")
                        .HasForeignKey("DepartmentAddUserID")
                        .IsRequired()
                        .HasConstraintName("FK_Department_AddUserID");

                    b.HasOne("MF2024_API.Models.User", "AddUser")
                        .WithMany("DepartmentUpDate")
                        .HasForeignKey("DepartmentUpDateUserID")
                        .IsRequired()
                        .HasConstraintName("FK_Department_UpDateUserID");

                    b.Navigation("AddUser");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("MF2024_API.Models.Device", b =>
                {
                    b.HasOne("MF2024_API.Models.User", "AddUser")
                        .WithMany("DeviceAdd")
                        .HasForeignKey("DeviceAddUserID")
                        .IsRequired()
                        .HasConstraintName("FK_Device_AddUserID");

                    b.HasOne("MF2024_API.Models.User", "UpdateUser")
                        .WithMany("DeviceUpdate")
                        .HasForeignKey("DeviceUpdateUserID")
                        .IsRequired()
                        .HasConstraintName("FK_Device_UserID");

                    b.HasOne("MF2024_API.Models.User", "DeviceUser")
                        .WithMany("Device")
                        .HasForeignKey("DeviceUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MF2024_API.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddUser");

                    b.Navigation("DeviceUser");

                    b.Navigation("Room");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("MF2024_API.Models.Entrants", b =>
                {
                    b.HasOne("MF2024_API.Models.Device", "Device")
                        .WithOne("Entrants")
                        .HasForeignKey("MF2024_API.Models.Entrants", "DeviceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("MF2024_API.Models.Equipment", b =>
                {
                    b.HasOne("MF2024_API.Models.Room", null)
                        .WithMany("Equipment")
                        .HasForeignKey("RoomId");
                });

            modelBuilder.Entity("MF2024_API.Models.Nfc", b =>
                {
                    b.HasOne("MF2024_API.Models.User", "AddUser")
                        .WithMany("NfcAdd")
                        .HasForeignKey("NfcAddUserID")
                        .IsRequired()
                        .HasConstraintName("FK_NFC_AddUserID");

                    b.HasOne("MF2024_API.Models.User", "UpdateUser")
                        .WithMany("NfcUpdate")
                        .HasForeignKey("NfcUpdateUserID")
                        .IsRequired()
                        .HasConstraintName("FK_NFC_UpDateUserID");

                    b.Navigation("AddUser");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("MF2024_API.Models.Nfcallotment", b =>
                {
                    b.HasOne("MF2024_API.Models.User", "AddUser")
                        .WithMany("NfcallotmentAdd")
                        .HasForeignKey("AddUserId")
                        .IsRequired()
                        .HasConstraintName("FK_NFCAllotment_AddUserID");

                    b.HasOne("MF2024_API.Models.Nfc", "Nfc")
                        .WithMany("Nfcallotments")
                        .HasForeignKey("NfcId")
                        .IsRequired()
                        .HasConstraintName("FK_NFCAllotment_NfcID");

                    b.HasOne("MF2024_API.Models.NoReservation", "NoReservation")
                        .WithMany("Nfcallotments")
                        .HasForeignKey("NoReservationId")
                        .HasConstraintName("FK_NFCAllotment_NoReservationID");

                    b.HasOne("MF2024_API.Models.Reservation", "Reservation")
                        .WithMany("Nfcallotments")
                        .HasForeignKey("ReservationId")
                        .HasConstraintName("FK_NFCAllotment_ReservationID");

                    b.HasOne("MF2024_API.Models.User", "UpdateUser")
                        .WithMany("NfcallotmentUpDate")
                        .HasForeignKey("UpdateUserId")
                        .IsRequired()
                        .HasConstraintName("FK_NFCAllotment_UpdateUserID");

                    b.HasOne("MF2024_API.Models.User", "User")
                        .WithMany("Nfcallotments")
                        .HasForeignKey("UserId");

                    b.Navigation("AddUser");

                    b.Navigation("Nfc");

                    b.Navigation("NoReservation");

                    b.Navigation("Reservation");

                    b.Navigation("UpdateUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MF2024_API.Models.NoReservation", b =>
                {
                    b.HasOne("MF2024_API.Models.User", "AddUser")
                        .WithMany("NoReservationAdd")
                        .HasForeignKey("NoReservationAddUserID")
                        .IsRequired()
                        .HasConstraintName("FK_NoReservation_AddUserID");

                    b.HasOne("MF2024_API.Models.User", "UpdateUser")
                        .WithMany("NoReservationUpdate")
                        .HasForeignKey("NoReservationUpdateUserID")
                        .IsRequired()
                        .HasConstraintName("FK_NoReservation_UpdateUserID");

                    b.Navigation("AddUser");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("MF2024_API.Models.Office", b =>
                {
                    b.HasOne("MF2024_API.Models.User", "AddUser")
                        .WithMany("OfficeAdd")
                        .HasForeignKey("OfficeAddUserID")
                        .IsRequired()
                        .HasConstraintName("FK_Office_AddUserID");

                    b.HasOne("MF2024_API.Models.User", "UpdateUser")
                        .WithMany("OfficeUpdate")
                        .HasForeignKey("OfficeUpDateUserID")
                        .IsRequired()
                        .HasConstraintName("FK_Office_UpDateUserID");

                    b.Navigation("AddUser");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("MF2024_API.Models.OptOut", b =>
                {
                    b.HasOne("MF2024_API.Models.Device", "Device")
                        .WithMany("OptOuts")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("FK_OptOut_Device");

                    b.HasOne("MF2024_API.Models.Nfcallotment", "Nfcallotment")
                        .WithMany("OptOuts")
                        .HasForeignKey("NfcallotmentId")
                        .IsRequired()
                        .HasConstraintName("FK_OptOut_NFCAllotment");

                    b.Navigation("Device");

                    b.Navigation("Nfcallotment");
                });

            modelBuilder.Entity("MF2024_API.Models.Reservation", b =>
                {
                    b.HasOne("MF2024_API.Models.User", "AddUser")
                        .WithMany("ReservationAdd")
                        .HasForeignKey("ReservationAddUserID")
                        .IsRequired()
                        .HasConstraintName("FK_Reservation_AddUserID");

                    b.HasOne("MF2024_API.Models.User", "UpdateUser")
                        .WithMany("ReservationUpdate")
                        .HasForeignKey("ReservationUpdateUserID")
                        .IsRequired()
                        .HasConstraintName("FK_Reservation_UpdateUserID");

                    b.HasOne("MF2024_API.Models.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddUser");

                    b.Navigation("Section");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("MF2024_API.Models.Room", b =>
                {
                    b.HasOne("MF2024_API.Models.Office", "Office")
                        .WithMany("Rooms")
                        .HasForeignKey("OfficeId")
                        .IsRequired()
                        .HasConstraintName("FK_Room_OfficeID");

                    b.HasOne("MF2024_API.Models.User", "AddUser")
                        .WithMany("RoomAdd")
                        .HasForeignKey("RoomAddUserID")
                        .IsRequired()
                        .HasConstraintName("FK_Room_SectionAddUserID");

                    b.HasOne("MF2024_API.Models.User", "UpdateUser")
                        .WithMany("RoomUpdate")
                        .HasForeignKey("RoompDateUserID")
                        .IsRequired()
                        .HasConstraintName("FK_Room_SectionUpDateUserID");

                    b.HasOne("MF2024_API.Models.Section", "Section")
                        .WithMany("Rooms")
                        .HasForeignKey("SectionId")
                        .HasConstraintName("FK_Room_SectionID");

                    b.Navigation("AddUser");

                    b.Navigation("Office");

                    b.Navigation("Section");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("MF2024_API.Models.RoomImage", b =>
                {
                    b.HasOne("MF2024_API.Models.Room", "room")
                        .WithMany("Images")
                        .HasForeignKey("roomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("room");
                });

            modelBuilder.Entity("MF2024_API.Models.Section", b =>
                {
                    b.HasOne("MF2024_API.Models.Department", "Department")
                        .WithMany("Sections")
                        .HasForeignKey("DepartmentId")
                        .IsRequired()
                        .HasConstraintName("FK_Section_DepartmentID");

                    b.HasOne("MF2024_API.Models.User", "AddUser")
                        .WithMany("SectionAdd")
                        .HasForeignKey("SectionAddUserID")
                        .IsRequired()
                        .HasConstraintName("FK_Section_SectionAddUserID");

                    b.HasOne("MF2024_API.Models.User", "UpdateUser")
                        .WithMany("SectionUpdate")
                        .HasForeignKey("SectionUpDateUserID")
                        .IsRequired()
                        .HasConstraintName("FK_Section_SectionUpDateUserID");

                    b.Navigation("AddUser");

                    b.Navigation("Department");

                    b.Navigation("UpdateUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MF2024_API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MF2024_API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MF2024_API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MF2024_API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MF2024_API.Models.Department", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("MF2024_API.Models.Device", b =>
                {
                    b.Navigation("ConferenceRoomReservations");

                    b.Navigation("Entrants")
                        .IsRequired();

                    b.Navigation("OptOuts");
                });

            modelBuilder.Entity("MF2024_API.Models.Nfc", b =>
                {
                    b.Navigation("Nfcallotments");
                });

            modelBuilder.Entity("MF2024_API.Models.Nfcallotment", b =>
                {
                    b.Navigation("OptOuts");
                });

            modelBuilder.Entity("MF2024_API.Models.NoReservation", b =>
                {
                    b.Navigation("Nfcallotments");
                });

            modelBuilder.Entity("MF2024_API.Models.Office", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("MF2024_API.Models.Reservation", b =>
                {
                    b.Navigation("Nfcallotments");
                });

            modelBuilder.Entity("MF2024_API.Models.Room", b =>
                {
                    b.Navigation("Equipment");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("MF2024_API.Models.Section", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("MF2024_API.Models.User", b =>
                {
                    b.Navigation("DepartmentAdd");

                    b.Navigation("DepartmentUpDate");

                    b.Navigation("Device");

                    b.Navigation("DeviceAdd");

                    b.Navigation("DeviceUpdate");

                    b.Navigation("NfcAdd");

                    b.Navigation("NfcUpdate");

                    b.Navigation("NfcallotmentAdd");

                    b.Navigation("NfcallotmentUpDate");

                    b.Navigation("Nfcallotments");

                    b.Navigation("NoReservationAdd");

                    b.Navigation("NoReservationUpdate");

                    b.Navigation("OfficeAdd");

                    b.Navigation("OfficeUpdate");

                    b.Navigation("ReservationAdd");

                    b.Navigation("ReservationUpdate");

                    b.Navigation("RoomAdd");

                    b.Navigation("RoomUpdate");

                    b.Navigation("SectionAdd");

                    b.Navigation("SectionUpdate");
                });
#pragma warning restore 612, 618
        }
    }
}
